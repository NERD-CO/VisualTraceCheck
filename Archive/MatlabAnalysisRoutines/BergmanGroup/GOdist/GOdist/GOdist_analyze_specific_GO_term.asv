function GOdist_analyze_specific_go_term_CDF(infile,expname,datadir,ontology,term,thresh_method,thresh_value);

% Take a closer look at a specific GO term
D = load(infile);
data = D.selected_data;
gene_ids = D.selected_ID;

N = length(data);

switch thresh_method
    case 'fixed'
        increased = (data > thresh_value);
        decreased = (data < -thresh_value);
    case 'percent'
        sortincreased = sort(data);
        sortdecreased = fliplr(sortincreased);
        CH_num = N * (100 - thresh_value)/100;
        inds = 1:N;
        CH_ind = min(find(inds > CH_num));
        increased = (data > sortincreased(CH_ind));
        decreased = (data < sortdecreased(CH_ind));
end

ALPHA = 0.05; % This value does not matter

switch ontology
    case 'cc'
        TOP_TERM = 5575;         
        GO_MTX_fname = [datadir filesep 'GO_CC_child_parent_mtx.mat'];
        GO_annotation_fname = [datadir filesep expname '_annot_cc.mat'];
        terms_fname = [datadir filesep 'GO_cc_terms.mat'];
        ontology_name = 'cellular component';
    case 'mf'
        TOP_TERM = 3674; 
        GO_MTX_fname = [datadir filesep 'GO_MF_child_parent_mtx.mat'];
        GO_annotation_fname = [datadir filesep expname '_annot_mf.mat'];
        terms_fname = [datadir filesep 'GO_mf_terms.mat'];        
        ontology_name = 'molecular function';
    case 'bp'
        TOP_TERM = 8150; 
        GO_MTX_fname = [datadir filesep 'GO_BP_child_parent_mtx.mat'];
        GO_annotation_fname = [datadir filesep expname '_annot_bp.mat'];
        terms_fname = [datadir filesep 'GO_bp_terms.mat'];
        ontology_name = 'biological process';
end

% LOAD DATA FILES
load(GO_MTX_fname)  % This file contains the variables created by [C,P,IP] = make_relative_list_matx_ver(ontology);
load(GO_annotation_fname); % This file contains the variables generated by  [AI,EC] = parse_annotation_file(ontology);
load(terms_fname); % A file of all terms and names

% Get relevant indices of this specific term
terminds = get_term_inds(term,P,AI,gene_ids);

if isempty(terminds)
    errordlg([num2str(term) ' is not a member of the ' ontology_name ' ontology!'],'GOdist');
    return
end
    
nametermrow = find(ALL_TERMS == term); % Row for the name
NAME  = [num2str(term) '  ' ALL_NAMES{nametermrow}];
slashes = findstr('\',NAME); % the legend cannot deal with these slashes without a warning
NAME(slashes) = '-';


% A list of all incdices
PARENT_INDS{1} = 1:length(data);     % Simply a list of all the indices which we need later for the exclusive test
PARENT_NAMES{1} = ontology_name;

% Get all immediate parents
termrow = find(IP(:,1) == term); AT = full(IP(termrow,:)); IM_PARENTS = AT(find(AT)); % A list of the immediate parents of this guy

% A List of all other parent indices
for i = 2:length(IM_PARENTS) % The first tem in the IP matrix is the term itself
    thisterm = IM_PARENTS(i);
    nametermrow = find(ALL_TERMS == thisterm); % Row for the name
    PARENT_NAMES{i}  = [num2str(thisterm) '  ' ALL_NAMES{nametermrow}];
    slashes = findstr('\',PARENT_NAMES{i});
    PARENT_NAMES{i}(slashes) = '-';
    PARENT_INDS{i}    = get_term_inds(thisterm,P,AI,gene_ids);
end

% GO over and compare to each parent
for i = 1:length(PARENT_INDS)
    
    % First compare to entire distribution
    otherinds = setdiff(PARENT_INDS{i},terminds);
    
    if ~isempty(otherinds)
        
        figure
        
        R1 = data(otherinds);    N1 = length(R1);
        R2 = data(terminds);     N2 = length(R2);
        
        % The KS test
        if length(R1) > 1 & length(R2) > 1 
            [Pks_sm Pks_lar] = ybs_kstest2(R1,R2);  % KS test, for both tails simultaneously                        
        else        
            Pks_sm  = nan;
            Pks_lar = nan;
        end
        
        % The KW test
        SAMPLES = [R1' ;  R2'];
        GROUP     = [ones(1,N1) 2*ones(1,N2)];
        P_kw = ranksum(R1,R2,ALPHA);  % Temporarily
        KS2rel = (N1*N2)/(N1 + N2);   % Has to be larger than 4 for a reliable KS test (MATLAB help)        
        
        % The variance test
        VAR_P = GODIST_var_rat(R1,R2);
        
        % The information string
        INFSTR{1} =  [NAME ' (n = ' num2str(N2) ') vs. '  PARENT_NAMES{i} ' (n = ' num2str(N1) ')' ];    
        INFSTR{2} =  ['Parent mean: ' num2str(mean(R1)) '  Term mean: ' num2str(mean(R2))];
        INFSTR{3} =  ['Parent median: ' num2str(median(R1)) '  Term median: ' num2str(median(R2))];    
        INFSTR{4}  = ['KS (N='  num2str(round(KS2rel))  '). Smaller P: '  num2str(Pks_sm) ' Larger P: ' num2str(Pks_lar)];
        INFSTR{5} =  ['Non parametric (KW): ' num2str(P_kw)];
        INFSTR{6}  = ['Parent variance: ' num2str(var(R1)) '  term variance: ' num2str(var(R2)) ' Variance test P: ' num2str(VAR_P)];
                
        INFSTR_SUM  = ['low KS: ' num2str(num2str(Pks_sm)) ' |  high KS: ' num2str(Pks_lar) ' | KW: ' num2str(P_kw) ' | Var : ' num2str(VAR_P)];
        
  
        [F1,X1] = ECDF(R1);
        [F2,X2] = ECDF(R2);
        [XX1 YY1 ] = stairs(X1, F1);
        [XX2 YY2 ] = stairs(X2, F2);
        hold on
        ph = plot(XX1,YY1,'k');
        set(ph,'linewidth',2);
        ph = plot(XX2,YY2,'g');
        set(ph,'linewidth',2);
        
        
        set(gca,'xlim',[-3.5 3.5]);
        xlabel('log (base 2) Null/WT ratio')
        ylabel('N')    
        box on
        legend([PARENT_NAMES{i} ' (' num2str(N1) ')'],[NAME ' (' num2str(N2) ')'],'Location','Best');
        th = title('');
        set(th,'Interpreter','none');    
        set(th,'string',INFSTR_SUM);
        
        inc = find(increased(terminds));
        inc_rats = R2(inc);
        for j = 1:length(inc_rats)
            lh = line([inc_rats(j) inc_rats(j)],[0 0.1]);
            set(lh,'color','r');
        end
        dec = find(decreased(terminds));
        dec_rats = R2(dec);
        for j = 1:length(dec_rats)
            lh = line([dec_rats(j) dec_rats(j)],[0 0.1]);
            set(lh,'color','b');
        end     
        
        %lilach
        INFSTR{7}  = ['number if ' num2str(var(R1)) '  term variance: ' num2str(var(R2)) ' Variance test P: ' num2str(VAR_P)];
        
        % Display the result on command prompt
        for is = 1:length(INFSTR)
            disp(INFSTR{is})
        end
        disp(['----------------------'])
        
        
    else
        disp(['In this list ' NAME ' and '   PARENT_NAMES{i} ' contain  exactly the same genes'])
    end
end

return























